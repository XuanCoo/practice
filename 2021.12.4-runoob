************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example41.html


title: static
    
    
problem:
    
*/

#include<stdio.h>

/*
设计一个函数重新排序一个数组

输入一个数组的地址，然后进行操作
*/

void fun()
{
    int i = 0;
    static int static_i = 0;
    printf("i=%d\n",i);
    printf("static_i=%d\n",static_i);
    i++;
    static_i++;
}

void fun2()
{
    int i = 0;
    static int static_i = 0;
    printf("i=%d\n",i);
    printf("static_i=%d\n",static_i);
    i++;
    static_i++;
}

int main()
{
    void fun();
    for (int i = 0; i<=3; i++)
    {
        fun();
        fun2();
    }
}
************************************************************************************************

#include <stdio.h>
#include <stdlib.h> // Standard library functions import

// define global variable
#define OK 1
#define ERROR 0
#define OVERFLOW -2 // define some speical number's meaning
typedef int Status;
//============chain stack================
/*why def this int type:
when we want to revise the int to char, we can 
revise only one position, not revise many position
which mean we link the same type together

benefit: only revise the head file,we can use this to char or othter type
*/
typedef int SElemType; 

typedef struct node 
{
    SElemType data;
    struct node *next;
}LinkStackNode; // 
//============chain stack initialization==========
void InitStack(LinkStackNode* top)
{
    /*creat the top of a chain stack*/
    top = (LinkStackNode*)malloc(sizeof(LinkStackNode));
    // ??? how malloc work
    top->next = NULL;
}
//==============push into the stack=============
Status Push(LinkStackNode *top,SElemType x){
    /*push the data into the stack*/
    LinkStackNode *p; // this means top and link is different
    p = (LinkStackNode*)malloc(sizeof(LinkStackNode));
    if (!p) return ERROR; /*fail to request space, and stop run here*/
    p->data = x;
    p->next = top->next; // ?????????why do this?
    // answer insert a element in the stack
    top->next = p;
    return OK;
}
//==============Pop=============
Status Pop(LinkStackNode*top, SElemType *x)
{   /* pop the top element of stack, and store data into x*/
    LinkStackNode *p; // initize the pointer alone, and store the localtion
    // why we donot malloc a new memory -> we have a memory, this time, we just to use it.
    p = top->next;
    if (p == NULL)  return OVERFLOW;
    // ??????if there is only one? no line to other ?
    // =NULL  means there is no location??? 
    top -> next = p ->next;
    *x = p->data;
    free(p);
    return OK;
}
************************************************************************************************






************************rewrite by myself****************************
==========need improve===================
/* make a chain stack from the scratch
	time: 2021.12.4
	author: XuanCoodx
*/



//===========structure===============
/*
step:
1. initialize the chain (make the top of chain)

2. make the body of a chain

3. push element into a chain

4. pop element out of a chain


def:
three special number:
	1. WRONG: -1
	2. OK:	0
	3. OVERFLOW: -2
	
struct node:
	1. data
	2. pointor
*/


#include <stdio.h>
#include <stdlib.h>

#define OK 0
#define WRONG -1
#define OVERFLOW -2

typedef int SElement;

typedef struct node{
	SElement data;
	struct node *next;
}LinkNode;

// ==============initialize the chain=============
void Initialize(LinkNode *top){
	// malloc a memory for top
	top = (LinkNode*)malloc(sizeof(LinkNode));
	top -> next = NULL;
	
}


//=============push a element in to the chain==============
static push(LinkNode* top, SElement x){
	// make a memory for this element
	LinkNode *p;
	p = (LinkNode*)malloc(sizeof(LinkNode));
	p->data = x;
	p->next = top->next;
	top->next = p;
//	free(p); // lol, how can I free this thing, fuck you, if free there will be no fucking memeory.
	return OK;
}
//=============pop a element in to the chain==============
static pop(LinkNode* top, SElement* x){
	LinkNode *p;
	p = top->next;
	top->next = p->next;
	*x = p->data;
	return OK;
}

int main(){
	LinkNode top;
	Initialize(&top);
	
	int a,b;
	int store;
	for (a = 0; a<=5; a++){
		push(&top,a);
		printf("%d\n",a);
	} 
	for (b = 5; b>=0; b--){
		pop(&top,&store);
		printf("%d\n", store);
	} 
}

int main(){
    LinkStackNode top;
    InitStack(&top);
    SElemType e;
    int i,j;
    for (i=5;i>0;i--){
        Push(&top,i);
        printf("the push is %d\n",i);
    }
    for (j=5; j>0;j--){
        Pop(&top,&e);
        printf("the pop is %d\n",e);
    }
    // system("pause");
}
************************************************************************************************
=====================what is auto????======================
/*
location:https://m.runoob.com/cprogramming/c-exercise-example42.html
    
    
title: use auto to define var
    
    
problem:
    

*/

#include <stdio.h>

int main()
{
	int i, num;
	num =2;
	for (i=0;i<3;i++)
	{
		printf("num = %d\n", num);
		num++;
		{
			auto int num = 1;
			printf("auto num = %d\n", num);
			num++;
		}
	}
} 

************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example43.html
    
title: 
    
    
problem:
    

*/

#include <stdio.h>

int main()
{
	int i,num;
	num = 2;
	for (i=0;i<3;i++)
	{
		printf("n = %d\n",num);
		num++;
		printf("%p\n",&num);
		{
			static int num=1;
			printf("static n = %d\n",num);
			printf("%p\n",&num);

			num++;
		}
	}
} 
************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example44.html


title: 
    
    
problem:
    

*/

#include <stdio.h>

int a,b,c;

void add()
{
	c = a+b;
}

int main()
{
	a = 1;
	b = 2;
	c = 0;
	printf("c = %d\n",c);
	add();
	printf("c = %d\n",c);

}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example45.html


title: 
    
    
problem:
    

*/

#include <stdio.h>



int main()
{
	register int i;
	int tmp = 0;
	for (i=0;i<=100;i++)
	{
		tmp+=i;
	}
	printf("%d\n",tmp);
	return 0;
}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example46.html


title:  how to use define
    
    
problem:
    

*/
#include <stdio.h>
#define TRUE 1
#define FALSE 0
#define SQ(x) x = x*x

int main()
{
	int x = 2;
	SQ(x);
	printf("%d",x);
}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example47.html


title:  how to use define
    
    
problem:
    

*/
#include <stdio.h>
#define exchange(a,b) {int t;t=a;a=b;b=t;}

int main()
{
	int a = 1;
	int b = 2;
	exchange(a,b);
	printf("a=%d,b=%d",a,b);
}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example47.html


title:  how to use define
    
    
problem:
    

*/
#include <stdio.h>
#define LAG >
#define SMA <
#define EQ ==

int main()
{
	int i,j;
	i = 11;
	j = 2;
	
	if (i LAG j)
	{
		printf("larger");
	}
}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example47.html


title:  how to use define
    
    
problem:
*/
#include <stdio.h>
#define LAG >
#define SMA <
#define EQ ==

#undef EQ

#ifndef EQ
	#define EQ ==
#endif

#define NB\
	printf("nb\n");\
	printf("zhen nb")

#define MAX(x,y) ((x)>(y)? (x):(y))

int main()
{
	int i,j;
	i = 11;
	j = 121;
//	printf("%d",EQ);
	if (i EQ j)
	{
		printf("larger");
	}
	NB;
	int max = MAX(i,j);
	printf("%d\n",max);
	printf("%s",__DATE__);
}


************************************************************************************************
/*
location:https://m.runoob.com/cprogramming/c-exercise-example47.html


title:  how to use define
    
    
problem:
    

*/
#include <stdio.h>
#define MAX
#define MAXIMUM(x,y) (x>y)? x:y
#define MINIMUM(x,y) (x>y)? y:x
int main()
{
	int a=10,b=20;
	#ifdef MAX
		printf("ifdef MAX\n");
	#else
		printf("else\n");
	#endif
}


************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************
************************************************************************************************

